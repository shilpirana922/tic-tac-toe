{"version":3,"sources":["logo.svg","Components/Icon.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMsz","setWinMsz","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b7e14c8c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport {FaTimes,FaPen,FaRegCircle} from \"react-icons/fa\"\r\n\r\nconst Icon=({name})=>{\r\n  switch(name){\r\n      case 'circle':\r\n          return <FaRegCircle className=\"icons\"/>\r\n      case 'cross':\r\n          return <FaTimes className=\"icons\"/>\r\n      default:\r\n          return <FaPen className=\"icons\"/>\r\n  }\r\n}\r\nexport default Icon;","import React,{useState} from 'react';\nimport logo from './logo.svg';\n\nimport Icon from \"./Components/Icon\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport {Card, CardBody,Container,Button,Row,Col} from \"reactstrap\"\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport './App.css';\n\n\n\nconst  itemArray=new Array(9).fill(\"empty\")\nfunction App() {\n  const [isCross, setIsCross]=useState(false);\n  const [winMsz,setWinMsz]=useState(\"\");\n\n\n  const reloadGame=()=>{\n      setIsCross(false);\n      setWinMsz(\"\");\n      itemArray.fill(\"empty\",0,9);\n  }\n\n  const checkWinner=()=>{\n        if(itemArray[0]===itemArray[1] &&\n           itemArray[0]===itemArray[2] && \n           itemArray[0]!==\"empty\"){\n          setWinMsz(`${itemArray[0]} won`);\n        }\n        else if(itemArray[3]===itemArray[4] &&\n          itemArray[3]===itemArray[5] && \n          itemArray[3]!==\"empty\"){\n         setWinMsz(`${itemArray[3]} won`);\n       }\n       else if(itemArray[6]===itemArray[7] &&\n        itemArray[6]===itemArray[8] && \n        itemArray[6]!==\"empty\"){\n       setWinMsz(`${itemArray[6]} won`);\n     }\n     else if(itemArray[0]===itemArray[3] &&\n      itemArray[0]===itemArray[6] && \n      itemArray[0]!==\"empty\"){\n     setWinMsz(`${itemArray[0]} won`);\n   }\n\n   else if(itemArray[1]===itemArray[4] &&\n    itemArray[1]===itemArray[7] && \n    itemArray[1]!==\"empty\"){\n   setWinMsz(`${itemArray[1]} won`);\n }\n else if(itemArray[2]===itemArray[5] &&\n  itemArray[2]===itemArray[8] && \n  itemArray[2]!==\"empty\"){\n setWinMsz(`${itemArray[2]} won`);\n}\n\nelse if(itemArray[0]===itemArray[4] &&\n  itemArray[0]===itemArray[8] && \n  itemArray[0]!==\"empty\"){\n setWinMsz(`${itemArray[0]} won`);\n}\nelse if(itemArray[2]===itemArray[4] &&\n  itemArray[2]===itemArray[6] && \n  itemArray[2]!==\"empty\"){\n setWinMsz(`${itemArray[2]} won`);\n}\nelse if(itemArray[0]!==\"empty\" &&\nitemArray[1]!==\"empty\" &&\nitemArray[2]!==\"empty\" &&\nitemArray[3]!==\"empty\" &&\nitemArray[4]!==\"empty\" &&\nitemArray[5]!==\"empty\" &&\nitemArray[6]!==\"empty\" &&\nitemArray[7]!==\"empty\" &&\nitemArray[8]!==\"empty\" ){\n\nsetWinMsz(\"It's a draw\");\n}\n}\n\n\n\n  const changeItem=(itemNumber)=>{\n      if(winMsz){\n       return  toast(winMsz,{type:\"success\"})\n      }\n    \n      if(itemArray[itemNumber]===\"empty\"){\n        itemArray[itemNumber]=isCross?\"cross\":\"circle\";\n        setIsCross(!isCross);\n      }\n      else{\n        return toast(\"Already Filled\",{type:\"error\"})\n      }\n      checkWinner();\n  }\n\n  return (\n    \n         <Container className=\"p-5\">\n           <ToastContainer position=\"bottom-center\"></ToastContainer>\n              <Row>\n                <Col md={6} className=\"offset-md-3\">\n               {\n                 winMsz?(\n                   <div className=\"mb-2 mt-2\">\n                    <h1 className=\"text-uppercase text-center text-success\">\n                         {winMsz}\n                    </h1>\n                    <Button color=\"success\" block onClick={reloadGame}>Reload The Game</Button>\n                   </div>\n                 ):(\n                   <h1 className=\"text-uppercase text-primary text-warning text-center\">\n                         {isCross?\"cross\":\"circle\"} turn \n                   </h1>\n                 )\n               }\n\n                <div className=\"grid\">\n                  {\n                    itemArray.map((item,index)=>(\n                       <Card color=\"warning\" onClick={()=>changeItem(index)}>\n                         <CardBody className=\"box\">\n                             <Icon name={item}/>\n                         </CardBody>\n                       </Card>\n                    ))\n                  }\n              \n                </div>\n                </Col>\n              </Row>\n         </Container>\n          \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}